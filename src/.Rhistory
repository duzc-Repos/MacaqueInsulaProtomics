install.packages("gapmap")
install.packages("gapmap")
install.packages("gapmap")
library(gapmap)
install.packages("ggplot2")
install.packages("C:/Users/86188/Desktop/gapmap_0.0.4.tar.gz", repos = NULL, type = "source")
install.packages("reshape2")
install.packages("C:/Users/86188/Desktop/gapmap_0.0.4.tar.gz", repos = NULL, type = "source")
library(gapmap)
install.packages("CMplot")
library(CMplot)
a = read.table('D:/workdir_for_Linux/work/laso/ancestry_update/3.feature_selection/0.ref/204164240154_10042493676.txt')
b = a[, 2:3]
b
View(b)
a = read.table('D:/workdir_for_Linux/work/laso/ancestry_update/3.feature_selection/0.ref/204164240154_10042493676.txt', header = T)
b = a[, 2:3]
CMplot(b, plot.type="d",bin.size=1e6,col=c("darkgreen","yellow", "red"),file="jpg",memo="snp_density",dpi=300)
b = a[, 1:3]
CMplot(b, plot.type="d",bin.size=1e6,col=c("darkgreen","yellow", "red"),file="jpg",memo="snp_density",dpi=300)
dev.off()
BiocManager::install("ChIPpeakAnno")
BiocManager::install("ChIPpeakAnno")
library("ChIPpeakAnno")
library(EnsDb.Hsapiens.v75)
BiocManager::install("EnsDb.Hsapiens.v75")
BiocManager::install(TxDb.Hsapiens.UCSC.hg19.knownGene)
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
install.packages('MixRF')
library(RFmix)
library(MixRF)
MixRF?
>
load('C:\Users\86188\Desktop\work\ibp\test\新建文件夹/.RData')
load('C:/Users/86188/Desktop/work/ibp/test/新建文件夹/.RData')
View(xb2)
View(n)
xb2$n
xb2$n %in% columns(n/)
columns(n)
colnames(n)
xb2 %in% colnames(n)
xb2
xb2$n %in% colnames(n)
xb2[xb2$n %in% colnames(n)]
xb2$n[xb2$n %in% colnames(n)]
xb2$n[~xb2$n %in% colnames(n)]
xb2$n[!xb2$n %in% colnames(n)]
t.test([1, 2, 3], [1, 2, 3])
t.test()
ks.test?
)
help(ks.test)
library(stats)
p.adjust
a = c(1, 2, 3)
a[TRUE]
BiocManager::install("DEqMS")
BiocManager::install("DEqMS")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("DEqMS")
library(DEqMS)
url <- "https://ftp.ebi.ac.uk/pride-archive/2016/06/PXD004163/Yan_miR_Protein_table.flatprottable.txt"
download.file(url, destfile = "./miR_Proteintable.txt",method = "auto")
df.prot = read.table("miR_Proteintable.txt",stringsAsFactors = FALSE,
header = TRUE, quote = "", comment.char = "",sep = "\t")
View(df.prot)
TMT_columns = seq(15,33,2)
dat = df.prot[df.prot$miR.FASP_q.value<0.01,TMT_columns]
rownames(dat) = df.prot[df.prot$miR.FASP_q.value<0.01,]$Protein.accession
View(dat)
dat.log = log2(dat)
dat.log = na.omit(dat.log)
boxplot(dat.log,las=2,main="TMT10plex data PXD004163")
equalMedianNormalization(dat.log)
dat.log2 = equalMedianNormalization(dat.log)
View(dat.log2)
View(dat.log)
equalMedianNormalization
View(dat.log)
View(dat)
TMT_columns = seq(15,33,2)
dat = df.prot[df.prot$miR.FASP_q.value<0.01,TMT_columns]
rownames(dat) = df.prot[df.prot$miR.FASP_q.value<0.01,]$Protein.accession
dat.log = log2(dat)
dat.log = na.omit(dat.log)
dat.log2 = equalMedianNormalization(dat.log)
View(dat.log)
View(dat)
View(df.prot)
TMT_columns = seq(15,33,2)
dat = df.prot[df.prot$miR.FASP_q.value<0.01,TMT_columns]
rownames(dat) = df.prot[df.prot$miR.FASP_q.value<0.01,]$Protein.accession
df.prot[df.prot$miR.FASP_q.value<0.01,]$Protein.accession
TMT_columns = seq(15,33,2)
dat = df.prot[df.prot$miR.FASP_q.value<0.01,TMT_columns]
rownames(dat) = df.prot[df.prot$miR.FASP_q.value<0.01,]$Protein.accession
dat.log = log2(dat)
dat.log = na.omit(dat.log)
dat.log2 = equalMedianNormalization(dat.log)
boxplot(dat.log,las=2,main="TMT10plex data PXD004163")
boxplot(dat.log2,las=2,main="TMT10plex data PXD004163")
boxplot(dat.log,las=2,main="TMT10plex data PXD004163")
boxplot(dat.log2,las=2,main="TMT10plex data PXD004163")
cond = as.factor(c("ctrl","miR191","miR372","miR519","ctrl",
"miR372","miR519","ctrl","miR191","miR372"))
cond
View(dat.log)
design = model.matrix(~0+cond)
colnames(design) = gsub("cond","",colnames(design))
View(design)
x <- c("miR372-ctrl","miR519-ctrl","miR191-ctrl",
"miR372-miR519","miR372-miR191","miR519-miR191")
contrast =  makeContrasts(contrasts=x,levels=design)
fit1 <- lmFit(dat.log, design)
fit2 <- contrasts.fit(fit1,contrasts = contrast)
fit3 <- eBayes(fit2)
View(fit2)
View(contrast)
View(fit3)
outputResult(fit3)
fit3
data.frame(fit3$)
data.frame(fit3)
a <- data.frame(fit3)
View(a)
toptable(fit3, coef = 1, number = Inf)
a <- toptable(fit3, coef = 1, number = Inf)
duplicateCorrelation
setwd("C:/Users/86188/Desktop/work/brainnetome/project/help/01_Insular_Proteomics/1.analysis_init/src")
library(readxl)
library(DEqMS)
library(ggplot2)
library(clusterProfiler)
library(org.Mmu.eg.db)
#######################################
# 0. Load raw proteomics data (after PD processed)
#######################################
rawdata <- read.csv("../data/0.rawdata/wosp22003/2-Input/protein_matrix.csv")
rawinfo <- read_excel("../data/0.rawdata/wosp22003/2-Input/样本实验信息登记表.xlsx")[1:15, ]
expr.log <- read.table("../data/2.prodata/protomics_expr_processed.tsv")
################################################
## differential analysis (Part1)
#  1. Pairwise model   (one vs. one)
#  2. Enrichment model (one vs. all)
################################################
subregion <- as.factor(as.numeric(rawinfo$实验组别))
design <- model.matrix(~0+subregion)
fit <- lmFit(expr.log, design = design)
eb <- eBayes(fit)
## 1. pairwise model
region_combs <- combn(colnames(design), 2)
region_contrasts <- apply(region_combs, 2, function(x) {
z <- paste(x, collapse = '-')
makeContrasts(contrasts = z, levels = design)
})
rownames(region_contrasts) <- colnames(design)
colnames(region_contrasts) <- apply(region_combs, 2, paste, collapse="-")
eb_contrasts <- eBayes(contrasts.fit(fit, region_contrasts))
pvals_contrasts <- eb_contrasts$p.value
fdr_contrasts <- apply(pvals_contrasts, 2, p.adjust, 'BH')
pairwise_model_conuting <- data.frame("FDR" = colSums(fdr_contrasts < 0.05),
"Pval-2" = colSums(pvals_contrasts < 0.01),
"Pval-6" = colSums(pvals_contrasts < 1e-6)
)
## 2. enrichment model
eb0_list <- lapply(unique(rawinfo$实验组别), function(x){
res <- as.factor(as.numeric(rawinfo$实验组别 == x))
m <- model.matrix(~res)
tmplm <- lmFit(expr.log, design = m)
eBayes(tmplm)
})
pvals0_contrasts <- sapply(eb0_list, function(x){ x$p.value[, 2, drop=FALSE] })
fdr0_contrasts <- apply(pvals0_contrasts, 2, p.adjust, 'BH')
tstats0_contrasts <- sapply(eb0_list, function(x) {x$t[, 2, drop = FALSE]})
logFC0_contrasts <-
enrichment_model_counting <- data.frame("FDR" = colSums(fdr0_contrasts < 0.05),
"Pval-2" = colSums(pvals0_contrasts < 0.01),
"Pval-6" = colSums(pvals0_contrasts < 1e-6)
)
rownames(enrichment_model_counting) <- colnames(design)
View(eb0_list)
View(pvals_contrasts)
View(eb0_list)
eb0_list[[0]]
eb0_list[0
eb0_list[0]
eb0_list[0]
eb0_list[1]
a <- eb0_list[1]
View(a)
a <- eb0_list[[1]]
View(a)
a <- as.data.frame(eb0_list[[1]])
View(a)
View(eb)
a <- as.data.frame(eb)
View(a)
